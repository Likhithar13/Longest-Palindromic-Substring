#include <stdio.h>
#include <limits.h>

int divide(int dividend, int divisor) {
    // Handle edge cases
    if (dividend == INT_MIN && divisor == -1) {
        return INT_MAX;  // Prevent overflow
    }
    if (dividend == INT_MIN && divisor == 1) {
        return INT_MIN;
    }

    // Determine the sign of the result
    int negative = (dividend < 0) ^ (divisor < 0) ? -1 : 1;

    // Convert dividend and divisor to positive numbers
    long long absDividend = llabs((long long)dividend);
    long long absDivisor = llabs((long long)divisor);

    // Perform division using bit manipulation
    long long quotient = 0;
    while (absDividend >= absDivisor) {
        long long tempDivisor = absDivisor, multiple = 1;

        // Double the divisor until it exceeds the remaining dividend
        while (absDividend >= (tempDivisor << 1)) {
            tempDivisor <<= 1;
            multiple <<= 1;
        }

        // Subtract the largest multiple of divisor from dividend
        absDividend -= tempDivisor;
        quotient += multiple;
    }

    // Apply the sign to the quotient
    quotient = negative * quotient;

    // Clamp the result to the 32-bit signed integer range
    if (quotient > INT_MAX) return INT_MAX;
    if (quotient < INT_MIN) return INT_MIN;

    return (int)quotient;
}

bool isMatch(char *s, char *p) {
    int m = strlen(s);
    int n = strlen(p);
    
    // DP table, dp[i][j] means whether s[0...i-1] matches p[0...j-1]
    bool dp[m+1][n+1];
    
    // Initialize the dp table
    memset(dp, false, sizeof(dp));
    
    // Base case: empty string matches empty pattern
    dp[0][0] = true;
    
    // Handle patterns like a*, a*b*, .* etc. that can match an empty string
    for (int j = 1; j <= n; j++) {
        if (p[j-1] == '*') {
            dp[0][j] = dp[0][j-2];
        }
    }
    
    // Fill the dp table
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (p[j-1] == s[i-1] || p[j-1] == '.') {
                dp[i][j] = dp[i-1][j-1];
            } else if (p[j-1] == '*') {
                // Two cases: ignore the character before '*' or use it one or more times
                dp[i][j] = dp[i][j-2] || (dp[i-1][j] && (p[j-2] == s[i-1] || p[j-2] == '.'));
            }
        }
    }
    
    // The final answer is whether the entire string s matches the entire pattern p
    return dp[m][n];
}

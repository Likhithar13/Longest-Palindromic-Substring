void generateParenthesisHelper(int n, int open, int close, char *current, int pos, char **result, int *resultSize) {
    if (pos == 2 * n) {
        current[pos] = '\0';
        result[*resultSize] = strdup(current); // Add the valid combination to the result
        (*resultSize)++;
        return;
    }
    if (open < n) {
        current[pos] = '(';
        generateParenthesisHelper(n, open + 1, close, current, pos + 1, result, resultSize);
    }
    if (close < open) {
        current[pos] = ')';
        generateParenthesisHelper(n, open, close + 1, current, pos + 1, result, resultSize);
    }
}

// Wrapper function
char **generateParenthesis(int n, int *returnSize) {
    int maxSize = 1 << (2 * n); // Maximum number of combinations (upper bound)
    char **result = (char **)malloc(maxSize * sizeof(char *));
    char *current = (char *)malloc((2 * n + 1) * sizeof(char));
    *returnSize = 0;

    generateParenthesisHelper(n, 0, 0, current, 0, result, returnSize);

    free(current);
    return result;
}

    
